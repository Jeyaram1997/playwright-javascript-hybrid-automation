trigger:
- main
- develop

pr:
- main

parameters:
- name: testType
  displayName: 'Test Type'
  type: string
  default: 'smoke'
  values:
  - smoke
  - regression
  - ui
  - api
  - mobile
  - performance

- name: browser
  displayName: 'Browser'
  type: string
  default: 'chromium'
  values:
  - chromium
  - firefox
  - webkit

- name: environment
  displayName: 'Environment'
  type: string
  default: 'test'
  values:
  - test
  - staging
  - production

variables:
  nodeVersion: '18.x'
  testType: ${{ parameters.testType }}
  browser: ${{ parameters.browser }}
  environment: ${{ parameters.environment }}

stages:
- stage: Test
  displayName: 'Execute Tests'
  jobs:
  - job: PlaywrightTests
    displayName: 'Playwright Tests'
    pool:
      vmImage: 'ubuntu-latest'
    
    strategy:
      matrix:
        Chromium:
          browserName: 'chromium'
        Firefox:
          browserName: 'firefox'
        WebKit:
          browserName: 'webkit'
    
    steps:
    - task: NodeTool@0
      displayName: 'ðŸŸ¢ Setup Node.js'
      inputs:
        versionSpec: $(nodeVersion)
        
    - script: |
        npm ci
        npx playwright install --with-deps $(browserName)
      displayName: 'ðŸ“¦ Install Dependencies'
      
    - script: |
        cp .env.example .env
        npm run init
        npm run doctor
      displayName: 'ðŸ”§ Framework Setup'
      
    - script: |
        node cli.js test:$(testType) --browser $(browserName) --env $(environment)
      displayName: 'ðŸ§ª Execute Tests - $(browserName)'
      continueOnError: 'true'
      
    - script: npm run report:all
      displayName: 'ðŸ“Š Generate Reports'
      condition: always()
      
    - task: PublishTestResults@2
      displayName: 'ðŸ“ˆ Publish Test Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'reports/junit-results.xml'
        mergeTestResults: true
        testRunTitle: 'Playwright Tests - $(browserName)'
      condition: always()
      
    - task: PublishPipelineArtifact@1
      displayName: 'ðŸ“¤ Upload Reports'
      inputs:
        targetPath: 'reports'
        artifact: 'test-reports-$(browserName)'
      condition: always()
      
    - task: PublishPipelineArtifact@1
      displayName: 'ðŸ“¤ Upload Screenshots'
      inputs:
        targetPath: 'reports/screenshots'
        artifact: 'screenshots-$(browserName)'
      condition: failed()

- stage: Report
  displayName: 'Generate Consolidated Report'
  dependsOn: Test
  condition: always()
  jobs:
  - job: AllureReport
    displayName: 'Generate Allure Report'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'ðŸ“¥ Download Test Results'
      inputs:
        buildType: 'current'
        downloadType: 'specific'
        downloadPath: '$(System.ArtifactsDirectory)'
        
    - script: |
        npm install -g allure-commandline
        allure generate $(System.ArtifactsDirectory)/*/allure-results --clean -o allure-report
      displayName: 'ðŸ“Š Generate Allure Report'
      
    - task: PublishPipelineArtifact@1
      displayName: 'ðŸ“¤ Publish Allure Report'
      inputs:
        targetPath: 'allure-report'
        artifact: 'allure-report'

- stage: Notify
  displayName: 'Send Notifications'
  dependsOn: [Test, Report]
  condition: always()
  jobs:
  - job: Notifications
    displayName: 'Send Notifications'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - script: |
        npm run send:reports
        npm run jira:report
      displayName: 'ðŸ“§ Send Email & Jira Reports'
      condition: failed()
